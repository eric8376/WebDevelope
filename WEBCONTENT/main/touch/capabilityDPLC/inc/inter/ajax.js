/** ajax.js   *  Ajax对象封装 *  @Author: wanghao15 *   *  >>接口：   *      callRemote(serviceName, funcName, [asyn, callback, fdata, url])   远程接口 *      @serviceName: 类名 *      @funcName：   方法名 *      @asyn:        [可选]是否异步，默认false *      @callback:    [可选]处理响应数据的回调函数 *      @fdata:       [可选]回调函数参数    *      @url:         [可选]请求的响应页面 *       *      e_handler   出错处理句柄，可选。 *      _object     创建浏览器兼容XHR的包装。 *   *   *  返回值：   *      如果是同步，返回同步请求对象；否则不返回。 *   *  >>回调函数：   *      回调函数有两个参数：(req, data) *      @req:       异步请求对象（XMLHttpRequest 或 ActiveXObject） *      @data:      传入的附加数据。   *   *  >>注意：   *   *      1、传递到回调函数的附加数据可以是数值、字串、数组或对象。   *      2、可置e_handler的参数为null来取消出错处理。   *   */    Ajax=function(){	this.callback = null;  this.fdata = null;};Ajax._debug=true;Ajax._object=function(){	var request = false;	try {		request = new ActiveXObject("Msxml2.XMLHTTP");	} catch (othermicrosoft) {		try {			request = new ActiveXObject("Microsoft.XMLHTTP");		} catch (other) {			try {				request = new XMLHttpRequest();			} catch (fail) {				request = false;			}		}	}		if (!request)		alert("Error initializing XMLHttpRequest!");	return request;};Ajax._url=function(){	return "/DispatchDesign/busifacadeservlet";}//-- 用户接口 -----------------------------------------------------------------   Ajax.prototype.callRemoteAs=function(serviceName, funcName){	var _self = this;	var arg = new Array();	for(var i=2;i<arguments.length;i++){	    arg[i-2]=arguments[i];	}	_self.callRemote(serviceName, funcName, arg, true, _self.callback, _self.fdata);	};// callRemote//（类全名, 函数名, [是否异步, 回调函数, 回调函数附加数据, URL]）   Ajax.prototype.callRemote = function (serviceName, funcName, _arguments, asyn, callback, fdata, url){	fdata = (fdata == undefined)? null: fdata;    asyn = (asyn == undefined)? false: asyn;    url = (url == undefined)? Ajax._url(): url;    var _self = this;        var doc = Ajax.makeDOM();	var node = doc.createProcessingInstruction("xml","version='1.0'");	doc.appendChild(node);	node = doc.appendChild(doc.createElement("Function"));	node.setAttribute("name",funcName);	node.setAttribute("serviceName",serviceName);	for(var i=0;i<_arguments.length;i++){	    var elm = doc.createElement("Param");	    var type = getObjectType(_arguments[i]);	    elm.setAttribute("type", type);	    packageObject(elm, type, _arguments[i]);	    node.appendChild(elm);	}		var sdata = doc.xml;      var X = Ajax._object();    if(asyn){        X.onreadystatechange = function(){ Ajax._callback(X, callback, fdata, _self); };        if(Ajax.debug_enable)           	Ajax._debugger(callback);    }    X.open('POST', url, asyn);         X.setRequestHeader('Content-length', sdata.length);       X.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');         X.send(sdata);         if(!asyn){    	return Ajax._getResponse(X);    }else{    	this.req = X;    	document.all.p_o_p_9.style.display="";    	//Ajax._callback(Ajax._getResponse(X), callback, fdata, _self);    }}// CALL 请求   //（POST数据, [是否异步, 回调函数, 回调函数附加数据, URL]）   Ajax.prototype.call = function (sdata, asyn, callback, fdata, url){       fdata = (fdata == undefined)? null: fdata;    asyn = (asyn == undefined)? true: asyn;    url = (url == undefined)? Ajax._url(): url;    var _self = this;         var X = Ajax._object();       if(asyn){        X.onreadystatechange = function(){ Ajax._callback(X, callback, fdata, _self); };        if(Ajax.debug_enable)           	Ajax._debugger(callback);    }    X.open('POST', url, asyn);         X.setRequestHeader('Content-length', sdata.length);       X.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');         X.send(sdata);         if(!asyn){           return X;    }else{    	this.req = X;    	//Ajax._callback(X, callback, fdata, _self);    }};Ajax.prototype.req = null;Ajax.prototype.cancle = function(req){		if(req != null){		req.abort();	}	document.all.p_o_p_9.style.display="none";}// 设置出错处理函数   Ajax.prototype.e_handler = function (func){       if(func !== undefined){    	this._eh = func;    } else {    	this._eh = Ajax._error;    }};  //-- 私有函数 -----------------------------------------------------------------   Ajax._callback = function (req, callback, data, obj){       if(req.readyState == 4) {       	document.all.p_o_p_9.style.display="none";        if(req.status != 200) {               //req.onreadystatechange = null;            if(obj._eh) obj._eh(req, callback);        }else{        	            callback(Ajax._getResponse(req), data);               //req.onreadystatechange = null;        }    }};// Debug: 显示采用的回调函数。   Ajax._debugger = function(func){       alert('running: ' + Ajax._fname(func));   };// 默认的出错处理   Ajax._error = function (req, callback){       alert(req.statusText + '\nShould run: ' + Ajax._fname(callback));   };// 提取函数名（含参数）   Ajax._fname = function (func){       var s = func.toString();       return s.slice(9, s.indexOf(')', 10)) + ')';   };Ajax._getResponse= function(xmlHttp){	var reVal = xmlHttp.responseText;	doc = Ajax.makeDOM();	try{	    if(!doc.loadXML(reVal)){	      throw new Error(0,"发生系统异常，请联系系统管理员！");	      return;	    }	    node = doc.documentElement;	    switch(node.tagName){	    case "Output":	        return Ajax.getObjectFromXml(node,node.getAttribute("type"));	    case "Error":	        throw Ajax.packageError(node);	    default:	        throw new Error(0,"发生系统异常，请联系系统管理员！");	    }    }    finally{	    X = node = doc = null;    }}Ajax.IsNumberInt = function (num){  var myMod = num % 1;  return (myMod == 0);}Ajax.makeDOM = function (){  var o,suffixs=[".4.0", ".3.0", ".2.0", ""];  for(var i=0;i<suffixs.length;i++){    try{      o = new ActiveXObject("msxml2.DOMDocument"+ suffixs[i]);      break;    }catch(ex){};  }  o.async = false;  o.validateOnParse = false;  o.resolveExternals = false;  return o;}Ajax.packageError=function (oN){  var e1 =new Error(0, oN.childNodes[1].text);  e1.code = oN.childNodes[0].text;  e1.resolve = oN.childNodes[2].text;  e1.stackTrace = oN.childNodes[3].text;  e1.toString = function(){return (((e1.code&&""!=e1.code)?e1.code+"：":"")+ e1.description +((e1.resolve&&""!=e1.resolve)?"\n"+e1.resolve:""));};  return e1;}Ajax.getObjectType=function (obj){  //n=null,b,i,f,s,d,o,a  if(obj == null) return 'n';  if(obj.constructor.toString().indexOf("Date")>0) return 'd';  if(obj.constructor.toString().indexOf("Array")>0) return 'a';  switch(obj.constructor){    case Number:      if(IsNumberInt(obj))        return 'i';      else        return 'f';      break;    case Boolean:      return 'b';      break;    case String:      return 's';      break;    case Date:      return 'd';      break;    case Array:      return 'a';      break;    default:      return 'o';      break;  }}Ajax.packageObject=function (elm,type,arg){  switch(type){    case 'n':      break;    case 'b':    case 'i':    case 'l':    case 'f':    case 's':      elm.text = strEncoded(arg.toString());      break;    case 'd':      elm.text = dateToString(arg);      break;    case 'o':      for(var key in arg){        var child =arg[key];        var subtype = getObjectType(child);        //it's empty deal to its minValue in b/i/f              //wangcc modify 201002021537 BEGIN        if(typeof child!="function"){//function就不要分装了        var childElm = elm.ownerDocument.createElement(subtype+key);        elm.appendChild(childElm);        packageObject(childElm,subtype,child);      }       //wangcc modify 201002021537 END      }      break;    case 'a':      for(var i=0;i<arg.length;i++){        var child =arg[i];        var subtype = getObjectType(child);        var childElm = elm.ownerDocument.createElement(subtype+"Item");        elm.appendChild(childElm);        packageObject(childElm,subtype,child);      }      break;   }}Ajax.getObjectFromXml=function (elm,type){  if(type==null) return null;  switch(type){    case 'n':    case 'v':      return null;    case 'b':    case 'B':      return (elm.text=="true");    case 'i':    case 'I':    case 'l':    case 'L':      var val = parseInt(elm.text);      if(isNaN(val)) throw elm.tagName+" must be an integer";      return val;    case 'f':    case 'F':      var val = parseFloat(elm.text);      if(isNaN(val)) throw elm.tagName+" must be an float";      return val;    case 's':    case 'S':      return elm.text;    case 'd':    case 'D':      try{        return parseDate(elm.text);      }catch(ex){        throw elm.tagName+"must be in a DateTime format(yyyy-MM-dd HH:mm:ss)";      }  case 'o':    {      var obj = new Object();      var nodes = elm.childNodes;      for(var i=0;i<nodes.length;i++){        var child = nodes[i];        if(child.nodeType==1){//NODE_ELEMENT          var childtype = child.tagName.charAt(0);          var key = child.tagName.substring(1);          obj[key] = getObjectFromXml(child,childtype);        }      }      return  obj;    }  case 'a':    {      var arr = new Array();      var nodes = elm.childNodes;      for(var i=0;i<nodes.length;i++){        var child = nodes[i];        if(child.nodeType==1){//NODE_ELEMENT          var childtype = child.tagName.charAt(0);          var key = child.tagName.substring(1);          if(key=="Item"){            arr[arr.length] = getObjectFromXml(child,childtype);          }        }      }      return arr;    }  default:    throw "type '"+ type +"' can't be recognized";  }}Ajax.parseDate=function (str){  var arrDate = str.split(/[\/\-: ]/);  if(arrDate.length<6) throw "Invalid DateTime format";  var d = new Date(arrDate[0],parseInt(arrDate[1]-1),arrDate[2],arrDate[3],arrDate[4],arrDate[5]);  if(isNaN(d))    throw "Invalid DateTime format";  return d;}Ajax.parseDateStr=function (str){  var yearStr =  str.substring(0,4);  var monthStr  = str.substring(5,7);  var dayStr  =  str.substring(8,10);  var dDay = new Date(yearStr,monthStr-1,dayStr);   return dDay;}Ajax.dateToString=function (d){  return d.getFullYear()+"-"+(d.getMonth()+1)+"-"+d.getDate()+" "+d.getHours()+":"+d.getMinutes()+":"+d.getSeconds();}/*  特殊字符编码 */Ajax.strEncoded =function (str){  if(str!=null){    //str = str.replace("\"", dq);    //str = str.replace(/'/g, "’");    //str = str.replace(/"/g, "”");    //str = str.replace("\\", tq);    //str = str.replace("=", eq);    //str = str.replace(/</g, "＜");    //str = str.replace(/>/g, "＞");    //str = str.replace(/&/g, "＆");  }else{    str="";  }  return str;}//-- End.----------------------------------------------------------------------  